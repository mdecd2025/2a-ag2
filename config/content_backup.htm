<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>2a or 2b 第幾組網站: (請自行填寫)</p>
<p>2a or 2b 第幾組倉儲: (請自行填寫)</p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<h1>task5</h1>
<h3>分工名單</h3>
<p><strong>第一項41223113</strong></p>
<p><strong>第二項41223116</strong></p>
<p><strong>第三項</strong></p>
<p><strong>第四項41223116</strong></p>
<p><strong>第五項</strong></p>
<p><strong>第六項41223114</strong></p>
<h2>Webots Tutorial 1 ~3 (HW3)</h2>
<p><br/><br/>第一項</p>
<p><span style="background-color: #ccffff;">請用繁體中文詳細說明下列資料: <a href="https://cyberbotics.com/doc/guide/introduction-to-webots" style="background-color: #ccffff;">https://cyberbotics.com/doc/guide/introduction-to-webots </a></span></p>
<p><span style="background-color: #ffcc00;">Webots 用戶指南 R2025a</span></p>
<h4 data-end="44" data-start="26"><span style="background-color: #ffcc00;">什麼是 Webots？</span></h4>
<p data-end="202" data-start="45">Webots 是一款專業的移動機器人模擬軟體，提供 3D 虛擬世界建構與物理模擬（質量、關節、摩擦係數等）。用戶可添加被動物件或主動機器人（輪式、腿式、飛行等），並為其配備感測器、驅動裝置（距離感測器、攝影機、馬達等），再透過程式控制機器人的行為。此外，Webots 內建多種機器人模型與範例程式，可快速上手。</p>
<p data-end="267" data-start="204">Webots 也支援與真實機器人（如 e-puck、DARwIn-OP、Nao）連接，讓用戶能將模擬結果應用於實體機器人。</p>
<h4 data-end="286" data-start="269">Webots 的應用</h4>
<p data-end="303" data-start="287">適用於學術研究與教育，涵蓋：</p>
<ul data-end="478" data-start="304">
<li data-end="337" data-start="304"><strong data-end="317" data-start="306">機器人原型開發</strong>（學術研究、汽車與航太產業、玩具等）</li>
<li data-end="365" data-start="338"><strong data-end="350" data-start="340">機器人運動學</strong>（雙足、四足、仿人機器人）</li>
<li data-end="392" data-start="366"><strong data-end="378" data-start="368">多智能體研究</strong>（群體智能、協作機器人）</li>
<li data-end="425" data-start="393"><strong data-end="406" data-start="395">自適應行為研究</strong>（基因演算法、神經網路、人工智慧）</li>
<li data-end="448" data-start="426"><strong data-end="437" data-start="428">機器人教學</strong>（編程、機器人學）</li>
<li data-end="478" data-start="449"><strong data-end="460" data-start="451">機器人競賽</strong>（如 Robotstadium）</li>
</ul>
<h4 data-end="501" data-start="480">Webots 需要的基本知識</h4>
<ul data-end="630" data-start="502">
<li data-end="582" data-start="502">需具備<span> </span><strong data-end="538" data-start="508">C、C++、Java、Python 或 MATLAB</strong><span> </span>的基礎編程能力來控制機器人（若不會編程，可使用 BotStudio 圖形化工具）。</li>
<li data-end="630" data-start="583">若要建立自訂機器人或物件，需具備基本<span> </span><strong data-end="624" data-start="604">3D 設計與 VRML97 語言</strong><span> </span>知識。</li>
</ul>
<h4 data-end="648" data-start="632">如何獲取用戶支持？</h4>
<ul data-end="854" data-start="649">
<li data-end="695" data-start="649"><strong data-end="659" data-start="651">付費支援</strong>：Cyberbotics 提供 Premier 服務與客製開發支援。</li>
<li data-end="854" data-start="696"><strong data-end="706" data-start="698">社群支援</strong>（不保證回覆）：
<ul data-end="854" data-start="719">
<li data-end="758" data-start="719"><strong data-end="747" data-start="721">Robotics StackExchange</strong>（最佳技術討論區）</li>
<li data-end="798" data-start="761"><strong data-end="785" data-start="763">GitHub Discussions</strong>（開發與文件相關問題）</li>
<li data-end="830" data-start="801"><strong data-end="820" data-start="803">GitHub Issues</strong>（僅限回報錯誤）</li>
<li data-end="854" data-start="833"><strong data-end="846" data-start="835">Discord</strong>（即時討論）</li>
</ul>
</li>
</ul>
<h4 data-end="875" data-start="856">Webots 模擬的組成</h4>
<ul data-end="1043" data-start="876">
<li data-end="938" data-start="876"><strong data-end="892" data-start="878">世界檔 (.wbt)</strong>：描述機器人與環境，包括物件的<span> </span><strong data-end="922" data-start="908">位置、外觀、物理特性</strong><span> </span>等（類似 VRML97）。</li>
<li data-end="1002" data-start="939"><strong data-end="950" data-start="941">控制器程式</strong>（C/C++/Java/Python/MATLAB）：用於控制機器人，可多個機器人共用相同控制程式。</li>
<li data-end="1043" data-start="1003"><strong data-end="1017" data-start="1005">物理插件（選用）</strong>：可調整 Webots 物理行為（C/C++）。</li>
</ul>
<h4 data-end="1072" data-start="1045">什麼是 Controller（控制器）？</h4>
<p data-end="1152" data-start="1073">控制器是控制機器人的程式，可用 C、C++、Java、Python 或 MATLAB 編寫。每個機器人啟動模擬時，Webots 會為其執行相應的控制程式。</p>
<ul data-end="1275" data-start="1154">
<li data-end="1183" data-start="1154"><strong data-end="1165" data-start="1156">編譯型語言</strong>（C、C++）：需編譯為執行檔。</li>
<li data-end="1223" data-start="1184"><strong data-end="1194" data-start="1186">直譯語言</strong>（Python、MATLAB）：需安裝對應的運行環境。</li>
<li data-end="1275" data-start="1224"><strong data-end="1234" data-start="1226">混合語言</strong>（Java）：需編譯為<span> </span><code data-end="1254" data-start="1246">.class</code><span> </span>或<span> </span><code data-end="1263" data-start="1257">.jar</code>，由 JVM 執行。</li>
</ul>
<p data-end="1319" data-start="1277">控制器程式存放於 Webots 專案內的<span> </span><strong data-end="1313" data-start="1298">controllers</strong><span> </span>目錄。</p>
<h4 data-end="1361" data-start="1321">什麼是 Supervisor Controller（監督控制器）？</h4>
<p data-end="1421" data-start="1362">若機器人的<span> </span><strong data-end="1392" data-start="1368">supervisor 欄位設為 TRUE</strong>，則其控制器為<span> </span><strong data-end="1409" data-start="1400">監督控制器</strong>，擁有額外權限，如：</p>
<ul data-end="1476" data-start="1422">
<li data-end="1448" data-start="1422">控制模擬運行（移動機器人、錄製模擬畫面等）。</li>
<li data-end="1476" data-start="1449">可用於高層級操作，而非單純模擬真實機器人行為。</li>
</ul>
<p data-end="1501" data-start="1478">監督控制器支援與一般控制器相同的編程語言。</p>
<p><br/><br/>第二項 <br/><br/><span style="background-color: #ccffff;">請整理 <a href="https://cyberbotics.com/doc/guide/introduction-to-webots" style="background-color: #ccffff;">https://cyberbotics.com/doc/guide/introduction-to-webots</a> 中重要的英文單字與用法, 並且針對其中所使用的英文文法逐句說明.</span></p>
<h4 data-end="46" data-start="0">Important Vocabulary and Phrases (重要詞彙與短語)</h4>
<ol data-end="1102" data-start="48">
<li data-end="88" data-start="48"><strong data-end="65" data-start="51">Simulation</strong> - 模擬：一個模仿現實世界過程或系統的過程。</li>
<li data-end="135" data-start="89"><strong data-end="107" data-start="92">Prototyping</strong> - 原型製作：創建產品或系統的早期版本（原型）的過程。</li>
<li data-end="190" data-start="136"><strong data-end="155" data-start="139">Mobile Robot</strong> - 移動機器人：能夠在其環境中移動的機器人，通常配有感測器和驅動器。</li>
<li data-end="259" data-start="191"><strong data-end="216" data-start="194">Locomotion Schemes</strong> - 移動方式：機器人移動的方式或系統（例如，輪式機器人、步態機器人、飛行機器人等）。</li>
<li data-end="310" data-start="260"><strong data-end="274" data-start="263">Sensors</strong> - 感測器：用來檢測並對物理刺激作出反應的裝置，例如相機或距離感測器。</li>
<li data-end="349" data-start="311"><strong data-end="327" data-start="314">Actuators</strong> - 驅動器：執行動作的裝置，如馬達或車輪。</li>
<li data-end="397" data-start="350"><strong data-end="375" data-start="353">Controller Program</strong> - 控制程式：控制機器人行為或運作的程式。</li>
<li data-end="452" data-start="398"><strong data-end="414" data-start="401">Interface</strong> - 介面：系統之間的連接或溝通（在此指模擬機器人與實體機器人之間的介面）。</li>
<li data-end="515" data-start="453"><strong data-end="480" data-start="456">Multi-Agent Research</strong> - 多代理研究：涉及多個機器人共同工作的研究，通常是協作或集群設定。</li>
<li data-end="581" data-start="516"><strong data-end="541" data-start="520">Adaptive Behavior</strong> - 自適應行為：基於環境或經驗變化的行為（通常涉及如神經網絡等人工智慧方法）。</li>
<li data-end="643" data-start="582"><strong data-end="599" data-start="586">BotStudio</strong> - BotStudio：一種簡單的圖形化程式設計語言，用於在Webots中編程機器人。</li>
<li data-end="727" data-start="644"><strong data-end="694" data-start="648">VRML97 (Virtual Reality Modeling Language)</strong> - VRML97（虛擬現實建模語言）：描述3D物體和環境的標準。</li>
<li data-end="779" data-start="728"><strong data-end="751" data-start="732">PROTOTYPE Files</strong> - PROTOTYPE檔案：定義模擬中新增物件的檔案。</li>
<li data-end="824" data-start="780"><strong data-end="798" data-start="784">World File</strong> - 世界檔案：定義模擬中環境、物體和機器人的檔案。</li>
<li data-end="883" data-start="825"><strong data-end="853" data-start="829">Controller Directory</strong> - 控制器目錄：儲存機器人控制程式源碼和二進位檔案的目錄。</li>
<li data-end="947" data-start="884"><strong data-end="913" data-start="888">Supervisor Controller</strong> - 監督控制器：一種特殊的控制器，具有更高的許可權來管理模擬功能。</li>
<li data-end="1013" data-start="948"><strong data-end="974" data-start="952">Binary Executables</strong> - 二進位執行檔：已編譯並可在系統中運行的程式檔案（例如".exe"檔案）。</li>
<li data-end="1102" data-start="1014"><strong data-end="1052" data-start="1018">Interpretation vs. Compilation</strong> - 解釋與編譯：指編程語言的處理方式（例如，編譯語言如C/C++與解釋語言如Python的區別）。                                       </li>
</ol>
<p><strong>第四項</strong></p>
<h4><span style="background-color: #ccffff;">請列出上述文章中的重要的英文單字與解釋, 以及出現在文句中的用法</span></h4>
<ol>
<li data-end="1139" data-start="1109">Grammar Explanation (文法說明)</li>
<li data-end="1157" data-start="1141">Sentence 1:</li>
<li data-end="1226" data-start="1158">"Webots is a professional mobile robot simulation software package."</li>
</ol>
<ul data-end="1353" data-start="1227">
<li data-end="1353" data-start="1227"><strong data-end="1241" data-start="1229">"Webots"</strong> (主語) <strong data-end="1253" data-start="1247">is</strong> (連繫動詞) <strong data-end="1320" data-start="1261">a professional mobile robot simulation software package</strong> (謂語名詞短語)。這是一個簡單的陳述句，描述Webots是什麼。</li>
</ul>
<ol>
<li data-end="1371" data-start="1355">Sentence 2:</li>
<li data-end="1539" data-start="1372">"It offers a rapid prototyping environment, that allows the user to create 3D virtual worlds with physics properties such as mass, joints, friction coefficients, etc."</li>
</ol>
<ul data-end="1783" data-start="1540">
<li data-end="1581" data-start="1540"><strong data-end="1557" data-start="1542">"It offers"</strong> (主語 + 動詞) 介紹了Webots的功能。</li>
<li data-end="1635" data-start="1582"><strong data-end="1601" data-start="1584">"that allows"</strong> 是一個關係子句，修飾 "environment"，解釋環境的功能。</li>
<li data-end="1681" data-start="1636"><strong data-end="1662" data-start="1638">"the user to create"</strong>（不定式短語）說明用戶可以進行的操作。</li>
<li data-end="1783" data-start="1682"><strong data-end="1763" data-start="1684">"with physics properties such as mass, joints, friction coefficients, etc."</strong> 提供有關虛擬世界的物理屬性的詳細信息。</li>
</ul>
<ol>
<li data-end="1801" data-start="1785">Sentence 3:</li>
<li data-end="1883" data-start="1802">"The user can add simple passive objects or active objects called mobile robots."</li>
</ol>
<ul data-end="2008" data-start="1884">
<li data-end="1941" data-start="1884"><strong data-end="1908" data-start="1886">"The user can add"</strong>（主語 + 情態動詞 + 動詞原形）表示用戶可以進行的操作或許可。</li>
<li data-end="2008" data-start="1942"><strong data-end="1970" data-start="1944">"called mobile robots"</strong> 是一個現在分詞短語，修飾 "active objects"，提供額外信息。</li>
</ul>
<ol>
<li data-end="2026" data-start="2010">Sentence 4:</li>
<li data-end="2130" data-start="2027">"These robots can have different locomotion schemes (wheeled robots, legged robots, or flying robots)."</li>
</ol>
<ul data-end="2207" data-start="2131">
<li data-end="2152" data-start="2131"><strong data-end="2142" data-start="2133">"can"</strong> 表示能力或可能性。</li>
<li data-end="2207" data-start="2153"><strong data-end="2189" data-start="2155">"different locomotion schemes"</strong> 表示機器人可以採用的不同移動方式。</li>
</ul>
<ol>
<li data-end="2225" data-start="2209">Sentence 5:</li>
<li data-end="2402" data-start="2226">"Moreover, they may be equipped with a number of sensor and actuator devices, such as distance sensors, drive wheels, cameras, motors, touch sensors, emitters, receivers, etc."</li>
</ol>
<ul data-end="2482" data-start="2403">
<li data-end="2448" data-start="2403"><strong data-end="2426" data-start="2405">"may be equipped"</strong> 使用情態動詞 <strong data-end="2441" data-start="2434">may</strong> 表示可能性。</li>
<li data-end="2482" data-start="2449"><strong data-end="2464" data-start="2451">"such as"</strong> 用來介紹感測器和驅動器裝置的例子。</li>
</ul>
<ol>
<li data-end="2500" data-start="2484">Sentence 6:</li>
<li data-end="2589" data-start="2501">"Finally, the user can program each robot individually to exhibit the desired behavior."</li>
</ol>
<ul data-end="2676" data-start="2590">
<li data-end="2631" data-start="2590"><strong data-end="2618" data-start="2592">"The user can program"</strong> 顯示了用戶的能力或許可。</li>
<li data-end="2676" data-start="2632"><strong data-end="2650" data-start="2634">"to exhibit"</strong> 是不定式動詞，說明編程的目的是為了表現所需的行為。</li>
</ul>
<ol>
<li data-end="2694" data-start="2678">Sentence 7:</li>
<li data-end="2905" data-start="2695">"Webots also contains a number of interfaces to real mobile robots, so that once your simulated robot behaves as expected, you can transfer its control program to a real robot like e-puck, DARwIn-OP, Nao, etc."</li>
</ol>
<ul data-end="3012" data-start="2906">
<li data-end="2941" data-start="2906"><strong data-end="2921" data-start="2908">"so that"</strong> 引導目的子句，解釋為何要轉移控制程式。</li>
<li data-end="3012" data-start="2942"><strong data-end="2983" data-start="2944">"once your simulated robot behaves"</strong> 是時間條件子句，表示模擬機器人表現正常後，才會進行轉移。</li>
</ul>
<ol>
<li data-end="3030" data-start="3014">Sentence 8:</li>
<li data-end="3059" data-start="3031">"What can I do with Webots?"</li>
</ol>
<ul data-end="3101" data-start="3060">
<li data-end="3101" data-start="3060">這是一個簡單的疑問句，使用情態動詞 <strong data-end="3089" data-start="3080">"can"</strong> 問Webots的功能。</li>
</ul>
<ol>
<li data-end="3119" data-start="3103">Sentence 9:</li>
<li data-end="3209" data-start="3120">"Webots is well suited for research and educational projects related to mobile robotics."</li>
</ol>
<ul data-end="3307" data-start="3210">
<li data-end="3253" data-start="3210"><strong data-end="3236" data-start="3212">"is well suited for"</strong> 表示Webots適合於某些用途。</li>
<li data-end="3307" data-start="3254"><strong data-end="3288" data-start="3256">"related to mobile robotics"</strong> 描述了Webots所支持的研究領域。</li>
</ul>
<ol>
<li data-end="3326" data-start="3309">Sentence 10:</li>
<li data-end="3414" data-start="3327">"Many mobile robotics projects have relied on Webots for years in the following areas:"</li>
</ol>
<ul data-end="3480" data-start="3415">
<li data-end="3458" data-start="3415"><strong data-end="3434" data-start="3417">"have relied"</strong> 使用現在完成時，表示一個持續或反覆發生的動作。</li>
<li data-end="3480" data-start="3459">這句話列出了Webots被使用的領域。</li>
</ul>
<ol>
<li data-end="3499" data-start="3482">Sentence 11:</li>
<li data-end="3539" data-start="3500">"What do I need to know to use Webots?"</li>
</ol>
<ul data-end="3589" data-start="3540">
<li data-end="3589" data-start="3540">這是另一個疑問句，使用 <strong data-end="3577" data-start="3554">"do I need to know"</strong> 來詢問需要掌握的知識。</li>
</ul>
<ol>
<li data-end="3608" data-start="3591">Sentence 12:</li>
<li data-end="3697" data-start="3609">"You will need a minimal amount of technical knowledge to develop your own simulations."</li>
</ol>
<ul data-end="3794" data-start="3698">
<li data-end="3737" data-start="3698"><strong data-end="3719" data-start="3700">"You will need"</strong>（將來時）表示必須具備的條件或需求。</li>
<li data-end="3794" data-start="3738"><strong data-end="3785" data-start="3740">"a minimal amount of technical knowledge"</strong> 指出所需的知識。</li>
</ul>
<ol>
<li data-end="3813" data-start="3796">Sentence 13:</li>
<li data-end="4076" data-start="3814">"If you don't want to use existing robot models provided within Webots and would like to create your own robot models, or add special objects in the simulated environments, you will need a basic knowledge of 3D computer graphics and VRML97 description language."</li>
</ol>
<ul data-end="4208" data-start="4077">
<li data-end="4126" data-start="4077"><strong data-end="4102" data-start="4079">"If you don't want"</strong>（條件句）提出一種情境，表示若不使用現有的模型。</li>
<li data-end="4167" data-start="4127"><strong data-end="4155" data-start="4129">"would like to create"</strong> 表示替代的期望或行動。</li>
<li data-end="4208" data-start="4168"><strong data-end="4189" data-start="4170">"you will need"</strong>（將來時）強調執行某些操作所需的知識。</li>
</ul>
<ol>
<li data-end="4227" data-start="4210">Sentence 14:</li>
<li data-end="4256" data-start="4228">"How do I get User Support?"</li>
</ol>
<ul data-end="4280" data-start="4257">
<li data-end="4280" data-start="4257">這是簡單的疑問句，詢問如何獲得使用者支持。</li>
</ul>
<hr data-end="4285" data-start="4282"/>
<ol>
<li data-end="4324" data-start="4287">Overall Grammar Features (整體文法特點)</li>
</ol>
<ul data-end="4684" data-is-last-node="" data-is-only-node="" data-start="4325">
<li data-end="4393" data-start="4325"><strong data-end="4359" data-start="4327">Present Simple Tense (現在簡單時)</strong>: 用來描述事實或一般性資訊（例如："Webots is..."）。</li>
<li data-end="4474" data-start="4394"><strong data-end="4435" data-start="4396">Modal Verbs (情態動詞)（can, may, would）</strong>: 表示可能性、能力或請求（例如："You can program..."）。</li>
<li data-end="4550" data-start="4475"><strong data-end="4504" data-start="4477">Relative Clauses (關係子句)</strong>: 提供名詞的額外資訊（例如："robots called mobile robots"）。</li>
<li data-end="4611" data-start="4551"><strong data-end="4575" data-start="4553">Future Tense (將來時)</strong>: 描述將來會發生的動作（例如："You will need..."）。</li>
<li data-end="4684" data-is-last-node="" data-start="4612"><strong data-end="4643" data-start="4614">Conditional Clauses (條件句)</strong>: 描述假設的情況及其結果（例如："If you don't want..."）</li>
</ul>
<h2>第六項</h2>
<p>在 Webots 中利用 圖形介面 (menu) 建立 四連桿機構 (four-bar linkage) 場景的步驟如下：</p>
<p>1. 建立新的 Webots 世界<br/>開啟 Webots，點選 File &gt; New World，建立一個新的場景。<br/>儲存 新的世界 (.wbt 檔案)。<br/>2. 添加環境<br/>在 Scene Tree (場景樹) 視窗中，右鍵 WorldInfo，選擇 Add &gt; Solid 來建立地面或其他環境元件。<br/>若需要平面地板，選擇 Add &gt; Shape &gt; Plane，並設定合適的尺寸。<br/>3. 建立四連桿機構<br/>(1) 新增連桿 (Links)<br/>每個連桿都是 Solid 元件，可從 Add &gt; Solid &gt; Shape &gt; Box/Cylinder 新增。<br/>設定：<br/>尺寸 (Size)<br/>質量 (Mass)<br/>位置 (Translation)<br/>(2) 新增鉸鏈關節 (Revolute Joint)<br/>在 Scene Tree 視窗，為每個關節選擇 Add &gt; Joint &gt; RevoluteJoint。<br/>關鍵設定<br/>Anchor (樞軸點位置)： 設定連桿之間的旋轉中心。<br/>Joint Parameters： 可設定旋轉角度範圍 (minPosition, maxPosition) 或馬達 (motor)。<br/>EndPoint： 設定此關節連接的目標連桿。<br/>(3) 組合完整機構<br/>確保所有連桿與關節的層級結構正確，例如：<br/>markdown<br/>複製<br/>編輯<br/>- Base (固定底座)<br/> - RevoluteJoint1<br/> - Link1<br/> - RevoluteJoint2<br/> - Link2<br/> - RevoluteJoint3<br/> - Link3<br/> - RevoluteJoint4<br/> - Link4<br/>4. 設定模擬參數<br/>Gravity (重力)：確認四連桿能正常運動，可在 WorldInfo &gt; gravity 中調整。<br/>Physics (物理屬性)：<br/>每個連桿應啟用 Physics 屬性，以確保物理模擬生效。<br/>調整 density (密度) 或 mass (質量) 來優化運動表現。<br/>5. 測試與調整<br/>運行模擬 (Run 按鈕) 確保機構正常運作。<br/>如有異常：<br/>確認 關節 (RevoluteJoint) 的 anchor 位置是否正確。<br/>檢查碰撞 是否影響運動。<br/>若有馬達，確認 PID 參數 是否適當。<br/>6. 進階功能 (可選)<br/>控制馬達：在 RevoluteJoint &gt; motor 啟用馬達，並設置 velocity (角速度) 及 torque (扭矩)。<br/>加入腳本控制：透過 Robot 控制器 (Controller) 以 Python / C / C++ 控制四連桿運動。<br/>動畫與視覺效果：可調整光源、材質與視角，使場景更具可視化效果。<br/>注意事項<br/>正確設置 RevoluteJoint 的 anchor，確保關節轉動中心對齊。<br/>連桿長度與關節位置對應，避免不符合機構運動規則的設計。<br/>調整物理屬性 (mass, inertia) 以確保運動穩定。<br/>避免連桿互相碰撞，可在 boundingObject 設定適當形狀，或啟用 contactMaterial 屬性調整摩擦力。<br/>測試不同參數 (如摩擦、重力) 以觀察影響。</p>
<h1>Homework</h1>
<h2>HW1</h2>
<p><span style="background-color: #00ccff;">hw1作業壓縮檔:</span></p>
<p><span style="background-color: #ffffff;"><a href="/downloads/41223113-HW1.7z" style="background-color: #ffffff;">HW1.7z</a></span></p>
<p><span style="background-color: #00ccff;">hw1-webots操作模擬影片:</span></p>
<p><span style="background-color: #00ccff;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/R_bDkRsMahM" width="560"></iframe></span></p>
<p><span style="background-color: #00ccff;">hw1作業題問解答:</span></p>
<ol class="marker:text-textOff list-decimal">
<li>
<p class="my-0"><strong>在製作 HW1 之前是否實際練習 Tutorial1 與 Tutorial2?</strong><br/>必須先實際練習 Tutorial1 與 Tutorial2，熟悉 Webots 基本操作與控制器撰寫。</p>
</li>
<li>
<p class="my-0"><strong>Webots 是什麼樣的軟體？它主要用途為何？</strong><br/>Webots 是跨平台機器人模擬軟體，用於機器人建模、控制演算法開發與教學研究。</p>
</li>
<li>
<p class="my-0"><strong>在 Tutorial1 中，學習者需要操作的主要機器人模型名稱是什麼？</strong><br/>主要使用 e-puck 小型輪式移動機器人。</p>
</li>
<li>
<p class="my-0"><strong>如何在 Webots 中建立並執行一個新的模擬世界（world）？</strong><br/>新建 .wbt 世界檔，添加物件與機器人，指定控制器，按 Play 執行模擬。</p>
</li>
<li>
<p class="my-0"><strong>請說明如何讓機器人在模擬中移動，並指出相關的程式控制方式。</strong><br/>控制器設定馬達速度，透過時間步長迴圈更新馬達輸出，驅動機器人移動。</p>
</li>
<li>
<p class="my-0"><strong>Tutorial1 中，學習者需要修改哪些參數或檔案來控制機器人的行為？</strong><br/>修改控制器程式檔案，調整馬達與感測器邏輯，並在 world 檔指定控制器名稱。</p>
</li>
<li>
<p class="my-0"><strong>請簡述 Webots 控制器（controller）的功能及其與機器人的關係。</strong><br/>控制器讀取感測器資料並控制機器人動作，透過 API 與機器人互動。</p>
</li>
<li>
<p class="my-0"><strong>在 Tutorial2 中，機器人需要完成什麼樣的任務或行為？</strong><br/>完成環境感知與自主避障任務。</p>
</li>
<li>
<p class="my-0"><strong>Webots 中的 "Supervisor" 是什麼？它與一般機器人控制器有何不同？</strong><br/>Supervisor 是特殊控制器，能管理整個模擬環境，操作任意物件。</p>
</li>
<li>
<p class="my-0"><strong>請說明如何在 Webots 中進行感測器數據的讀取與應用（例如距離感測器、攝影機）。</strong><br/>取得感測器裝置並啟動，在迴圈中讀取數據並應用於控制邏輯。</p>
</li>
<li>
<p class="my-0"><strong>若要延伸 Tutorial2 讓機器人具備自主避障能力，你會怎麼設計與實作？</strong><br/>利用多個距離感測器判斷障礙物，設計避障策略，控制器中實作狀態機調整馬達速度。</p>
</li>
<li>
<p class="my-0"><strong>請說明 Webots 中「時間步長（timestep）」的意義，以及它對模擬的影響。</strong><br/>時間步長為模擬更新間隔，影響精度與速度，步長越小精度越高。</p>
</li>
<li>
<p class="my-0"><strong>如何在 Webots 中為機器人新增感測器？請說明基本步驟。</strong><br/>在 world 編輯器新增感測器節點，設定參數，控制器中取得並啟動感測器。</p>
</li>
<li>
<p class="my-0"><strong>請說明如何將 Webots 控制器程式從 Python 改為 C 語言，並指出相關設定。</strong><br/>建立 C 程式，指定控制器名稱，使用 C API 編寫並編譯。</p>
</li>
<li>
<p class="my-0"><strong>Tutorial1、2 中，若控制器程式有語法錯誤時，Webots 會如何反應？學員該如何排除？</strong><br/>顯示錯誤訊息，控制器無法執行，利用 Console 與 Debug 工具排錯。</p>
</li>
<li>
<p class="my-0"><strong>如何將 Webots 世界（world）或機器人設定檔分享給他人，確保對方可順利開啟模擬？</strong><br/>分享完整專案資料夾，包含 .wbt、.proto、controllers 等。</p>
</li>
<li>
<p class="my-0"><strong>如果想讓機器人在模擬時產生聲音或播放音樂，Webots 提供哪些方法？</strong><br/>使用 Sound 節點新增聲音來源，控制器可播放與停止音效。</p>
</li>
<li>
<p class="my-0"><strong>請說明如何在 Webots 中同時操作多個機器人，並讓它們各自執行不同控制器。</strong><br/>新增多機器人節點，分別指定不同控制器名稱，Webots 啟動多控制器。</p>
</li>
<li>
<p class="my-0"><strong>在 Webots 控制器中，如何獲得機器人的當前座標位置與朝向？</strong><br/>利用 Supervisor API 的 getPosition() 與 getOrientation()。</p>
</li>
<li>
<p class="my-0"><strong>請說明 Webots 控制器中感測器資料的單位（例如距離感測器、加速度計），以及如何正確解讀。</strong><br/>距離感測器以公尺或毫米為單位，加速度計為 m/s²，依規格解讀。</p>
</li>
<li>
<p class="my-0"><strong>如果想要錄製 Webots 模擬畫面並輸出成影片檔，該如何操作？</strong><br/>使用內建錄影功能或 Supervisor 指令錄製並輸出影片。</p>
</li>
<li>
<p class="my-0"><strong>Webots 中的 PROTO 文件有什麼作用？與 world 檔（.wbt）的關係為何？</strong><br/>PROTO 定義物件模板，world 檔引用 PROTO 建立場景物件。</p>
</li>
<li>
<p class="my-0"><strong>請說明如何在 Webots 中設定機器人的初始位置和方向。</strong><br/>修改機器人節點的 translation 與 rotation 屬性。</p>
</li>
<li>
<p class="my-0"><strong>在 Tutorial1 或 Tutorial2 中，如何讓機器人執行預設外的自訂動作？</strong><br/>修改控制器程式，新增自訂函式並在主迴圈呼叫。</p>
</li>
<li>
<p class="my-0"><strong>Webots 支援哪些主流程控制語言？各有何優缺點？</strong><br/>支援 C/C++、Python、Java、MATLAB。C/C++效能佳，Python易學，Java跨平台，MATLAB適合數學分析。</p>
</li>
<li>
<p class="my-0"><strong>機器人控制器程式如何與其他程式（如資料記錄、遠端伺服器）進行通訊？</strong><br/>使用 TCP/IP、UDP 或 WebSocket 協定進行資料交換。</p>
</li>
<li>
<p class="my-0"><strong>Webots 的模擬世界中燈光和陰影設定如何影響感測器或相機的數據？</strong><br/>影響相機影像亮度與對比度，可能影響視覺感測器辨識。</p>
</li>
<li>
<p class="my-0"><strong>如何在 Webots 中調整機器人或感測器的物理參數（如質量、摩擦係數）？</strong><br/>修改物件 physics 節點的 mass、friction 等屬性。</p>
</li>
<li>
<p class="my-0"><strong>請說明如何使用 Webots 的 Console 與 Debug 工具協助程式錯誤排除。</strong><br/>Console 顯示輸出與錯誤，Debug 可設定斷點與單步執行。</p>
</li>
<li>
<p class="my-0"><strong>Tutorial1、2 裡的機器人遇到物體時，碰撞偵測機制如何運作？</strong><br/>物理引擎偵測碰撞事件，感測器資料反映碰撞狀況，控制器可調整行為。</p>
</li>
<li>
<p class="my-0"><strong>若要將 Webots 模擬結果導出並進行數據分析，你會選擇哪些方法與工具？</strong><br/>在控制器中記錄感測器數據與狀態至檔案，使用 Python、MATLAB 等工具進行後續分析。</p>
</li>
</ol>
<h2>HW2 </h2>
<p><span style="background-color: #00ccff;">hw2-webots操作模擬影片</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/iWfdaVoTS7M" width="560"></iframe></span></p>
<p><span></span><span style="background-color: #ffcc00;">心得:</span></p>
<p><span>這份 Webots 世界檔展示了四連桿機構的建模，但多重關節指向同一 Solid，容易形成 kinematic loop，Webots 物理引擎對此支援有限，模擬時常出現不穩定或異常。外部資源與本地檔案路徑若有誤，模型將無法完整載入，影響仿真效果。物理參數未細緻設定，也會降低模擬的真實性。這些問題提醒我們，在設計複雜結構時需特別注意模擬平台的限制、資源管理及參數設定，以確保仿真穩定且可重現。</span></p>
<p><span style="background-color: #ffcc00;">詢問優化建議:</span></p>
<p><span>這段優化建議提醒我們應避免 kinematic loop，透過簡化結構或使用 Webots 支援的 Constraint 來提升模擬穩定性。同時，將 EXTERNPROTO 和 CAD 模型本地化，確保路徑正確，避免載入失敗。明確設定每個 Solid 的質量與慣性，增強物理真實感。基座物件應補齊 boundingObject 和 Physics 屬性，並且命名上應有意義且唯一，方便維護與擴展。這些措施可提升模擬的穩定性與可維護性。</span></p>
<p><span><span style="background-color: #ffcc00;">hw2作業題問解答:</span></span></p>
<p><span><span style="background-color: #ffcc00;"></span></span></p>
<p><span style="background-color: #00ccff;">Tutorial3：地面顏色感測與行為控制</span></p>
<p><br/> 主要學習目標：學習利用 ground sensor 偵測地面顏色，並根據顏色改變機器人行為。</p>
<p>偵測方式：使用安裝於機器人底部的 ground sensor 讀取反射光強度。</p>
<p>感測器作用：辨識地面顏色（如黑、白、灰），用於巡線或標記辨識。</p>
<p>程式操作：啟用感測器並讀取數值，根據數值判斷顏色。</p>
<p>行為改變：遇黑線時停下或轉向，遇白色繼續前進。</p>
<p>校正原因：環境光線與地面材質影響感測器數值，校正提升準確度。</p>
<p>sampling period 設定：啟用感測器時指定取樣週期。</p>
<p>判斷錯誤原因：感測器未校正、光線變化、材質反光異常、門檻設定不當。</p>
<p></p>
<p><span style="background-color: #00ccff;">Tutorial4：距離感測與避障行為</span></p>
<p><br/> 核心任務：利用距離感測器偵測障礙物，實作自動避障。</p>
<p>偵測方式：e-puck 配備多個紅外線距離感測器，取得周圍障礙物距離。</p>
<p>DistanceSensor 運作：回傳與障礙物距離成比例的數值（0~4096）。</p>
<p>程式操作：取得感測器裝置，啟用並讀取數值。<br/> <br/> 數值單位與轉換：數值為比例值，需校正轉換為實際距離。</p>
<p>sampling period 設定：啟用時設定取樣週期（毫秒）。</p>
<p>避障行為實作：根據感測器數值判斷障礙物方向，調整轉向。</p>
<p>雙側障礙物處理：後退並隨機轉向避免死角。</p>
<p>多感測器考量：提供完整環境資訊，提升避障精確度。</p>
<p>故障排除：檢查感測器啟用、校正門檻、演算法優化、馬達控制。</p>
<p></p>
<p><span style="background-color: #00ccff;">Tutorial5：多感測器整合與複雜任務</span></p>
<p><br/> 主題：結合多種感測器，實作複雜任務與有限狀態機（FSM）。</p>
<p>多感測器反應：根據地面顏色與障礙物狀態調整行為。</p>
<p>感測器融合：同時讀取多感測器數值，設計 FSM 進行狀態切換。</p>
<p>巡線與避障結合：巡線為主，遇障礙物暫停巡線避障。</p>
<p>衝突訊息決策：設定感測器優先權或依狀態機切換行為。</p>
<p>任務流程切換：以 FSM 控制狀態與行為。</p>
<p>FSM 設計：定義狀態，根據感測器輸入切換。</p>
<p>挑戰題目：如同時巡線避障，先分別實作再整合。</p>
<p>自主巡邏功能：路徑規劃、位置記錄、感測器融合、狀態控制。</p>
<p>感測器資料融合（Sensor Fusion）</p>
<p>將多種感測器數據整合，提升環境感知與決策能力。</p>
<p>應用於巡線避障、複雜任務狀態切換</p>
<p><span></span></p>
<p><span></span></p>
<h3>task3</h3>
<p><span style="background-color: #00ffff;">利用fourbar_slvs資料夾內零件，繪製link-1</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/xYumahfXxqc" width="560"></iframe></p>
<p><span style="background-color: #00ffff;">利用fourbar_slvs資料夾內零件，繪製link-2</span></p>
<p><span style="background-color: #00ffff;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/omKs6J7mzXI" width="560"></iframe></span></p>
<p><span style="background-color: #00ffff;">利用fourbar_slvs資料夾內零件，繪製link-3</span></p>
<p><span style="background-color: #00ffff;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/vD76zw5Gtgs" width="560"></iframe></span></p>
<p><span style="background-color: #00ffff;">利用fourbar_slvs資料夾內零件，繪製base-1</span></p>
<p><span style="background-color: #00ffff;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/w07YgEw-Wx8" width="560"></iframe></span></p>
<p><span style="background-color: #00ffff;">利用fourbar_slvs資料夾內零件，繪製fourbar_linkage_design-1</span></p>
<p><span style="background-color: #00ffff;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/5WjbZU4CFzE" width="560"></iframe></span></p>
<p><span style="background-color: #00ffff;">利用fourbar_slvs資料夾內零件，繪製shaft-1</span></p>
<p><span style="background-color: #00ffff;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Fe2TyEpW828" width="560"></iframe></span></p>
<p><span style="background-color: #00ffff;">利用fourbar_slvs資料夾內零件，繪製shaft-2</span></p>
<p><span style="background-color: #00ffff;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/C-FcF43e-d4" width="560"></iframe></span></p>
<p><span style="background-color: #00ffff;">利用fourbar_slvs資料夾內零件，繪製fourbar_linkage_design_w_assembiy</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/wx9L3Q-hpas" width="560"></iframe></span><span style="background-color: #00ffff;"><br/></span></p>
<p><span style="background-color: #00ffff;"><span>hw2作業壓縮檔:</span></span></p>
<p><span style="background-color: #ffffff;"><a href="/downloads/41223113.7z" style="background-color: #ffffff;">/downloads/41223113.7z</a></span></p>
<p><span style="background-color: #ffffff;"><a href="/downloads/41223113-HW2.7z" style="background-color: #ffffff;">/downloads/41223113-HW2.7z</a></span></p>
<h2>HW3</h2>
<h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<p><span style="background-color: #ffcc00;">期末報告pdf:</span></p>
<p><span style="background-color: #ffffff;"><a href="/downloads/cd2025_final_chinese_report.pdf" style="background-color: #ffffff;">ag2-期末報告</a></span></p>
<p><span style="background-color: #ffcc00;">期末報告影片:</span></p>
<p><span style="background-color: #ffffff;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/A7Gme_zqjUg" width="560"></iframe></span></p>
<p><br/><span style="background-color: #ffffff;"></span>期末報告心得:</p>
<p>41223113:</p>
<p><span>這次期末協同專案是以 Webots 動態投籃模擬系統為題，六人小組合作完成。專案中，我們設計了一個能隨機移動擺動的籃框，搭配可自由移動的投籃輪車，並透過鍵盤控制輪車移動與投籃。系統會自動計分並補球，讓遊戲能持續進行直到籃球用完。這過程讓我體會到團隊合作的重要性，大家分工協調才能完成複雜的系統整合，也學習到如何運用模擬工具來驗證設計，提升實務操作能力。整體來說，這次專案不僅加深了我對機械設計與控制的理解，也讓我更熟悉協同合作的流程。</span></p>
<p><span>41223114:</span></p>
<p><span>修改車輛的速度絕非那麼簡單，除了contoller之外，device的部分也要做出修改，甚至要注意不同車輛間名子相同與否，繁瑣的步驟也造就了其可創造的機構的複雜性，甚至是一整個系統。能夠使用這學期所學的知識來創造一個完整的遊戲系統，我與有榮焉。未來希望我們可以製作出串流的過程，一整個系統在串流，想想就令人興奮。</span></p>
<p><span></span></p>
<p><span>41123116</span></p>
<p><span>這次期末專案我參與了的投籃機的模擬系統，過程中看不懂的英文我用，google的相機即時翻譯，錯誤的就詢問</span>cht gpt在反覆的改正，AI真的非常方便在這次的合作過程中常常使用，整個系統整合完後，相信我們已經具備一定的基礎，在以後也能使用到這項技能</p>
<p>41223141</p>
<p>我負責的部分是投籃機，</p>
<p>首先是零件的繪製，因為上學期已經熟知solvespaces的功能了，所以在繪製零件的部分是完全沒問題。</p>
<p>在各個零件組立的部分也都沒有問題，唯一有問題的地方是connect桿件的部分，組立的時候有比較複雜，需要先與第一步建構圖60mm的地方做平行。上端press board的地方需要做限制，下端孔洞的部分需要最後再做限制。</p>
<p>分割的部分是使用老師給的python程式，並且在可攜cmd輸入pip install numpy做分割。</p>
<p>使用blender程式將分割好的檔案重新命名。</p>
<p>webot的部分就是需要特別注意solvespaces上各個銷孔洞的位置，要在solvespaces裡面查看點座標再輸入進webot。</p>
<p><span style="background-color: #ffff00;"></span></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>