var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 協同產品設計實習 - Collaborative Product Design Practice \n 2a or 2b 第幾組網站: (請自行填寫) \n 2a or 2b 第幾組倉儲: (請自行填寫) \n \n 課程代號: cd2025 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 p5z4eku \n \n 課程評分: \n Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單 \n Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單 \n Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單 \n', 'tags': '', 'url': 'About.html'}, {'title': 'task5', 'text': '', 'tags': '', 'url': 'task5.html'}, {'title': '分工名單', 'text': '第一項41223113 \n 第二項41223116 \n 第三項 \n 第四項41223116 \n 第五項 \n 第六項41223114 \n', 'tags': '', 'url': '分工名單.html'}, {'title': 'Webots Tutorial 1 ~3 (HW3)', 'text': '第一項 \n 請用繁體中文詳細說明下列資料:\xa0 https://cyberbotics.com/doc/guide/introduction-to-webots\xa0 \n Webots 用戶指南 R2025a \n 什麼是 Webots？ \n Webots 是一款專業的移動機器人模擬軟體，提供 3D 虛擬世界建構與物理模擬（質量、關節、摩擦係數等）。用戶可添加被動物件或主動機器人（輪式、腿式、飛行等），並為其配備感測器、驅動裝置（距離感測器、攝影機、馬達等），再透過程式控制機器人的行為。此外，Webots 內建多種機器人模型與範例程式，可快速上手。 \n Webots 也支援與真實機器人（如 e-puck、DARwIn-OP、Nao）連接，讓用戶能將模擬結果應用於實體機器人。 \n Webots 的應用 \n 適用於學術研究與教育，涵蓋： \n \n 機器人原型開發 （學術研究、汽車與航太產業、玩具等） \n 機器人運動學 （雙足、四足、仿人機器人） \n 多智能體研究 （群體智能、協作機器人） \n 自適應行為研究 （基因演算法、神經網路、人工智慧） \n 機器人教學 （編程、機器人學） \n 機器人競賽 （如 Robotstadium） \n \n Webots 需要的基本知識 \n \n 需具備 \xa0 C、C++、Java、Python 或 MATLAB \xa0 的基礎編程能力來控制機器人（若不會編程，可使用 BotStudio 圖形化工具）。 \n 若要建立自訂機器人或物件，需具備基本 \xa0 3D 設計與 VRML97 語言 \xa0 知識。 \n \n 如何獲取用戶支持？ \n \n 付費支援 ：Cyberbotics 提供 Premier 服務與客製開發支援。 \n 社群支援 （不保證回覆）：\n \n Robotics StackExchange （最佳技術討論區） \n GitHub Discussions （開發與文件相關問題） \n GitHub Issues （僅限回報錯誤） \n Discord （即時討論） \n \n \n \n Webots 模擬的組成 \n \n 世界檔 (.wbt) ：描述機器人與環境，包括物件的 \xa0 位置、外觀、物理特性 \xa0 等（類似 VRML97）。 \n 控制器程式 （C/C++/Java/Python/MATLAB）：用於控制機器人，可多個機器人共用相同控制程式。 \n 物理插件（選用） ：可調整 Webots 物理行為（C/C++）。 \n \n 什麼是 Controller（控制器）？ \n 控制器是控制機器人的程式，可用 C、C++、Java、Python 或 MATLAB 編寫。每個機器人啟動模擬時，Webots 會為其執行相應的控制程式。 \n \n 編譯型語言 （C、C++）：需編譯為執行檔。 \n 直譯語言 （Python、MATLAB）：需安裝對應的運行環境。 \n 混合語言 （Java）：需編譯為 \xa0 .class \xa0 或 \xa0 .jar ，由 JVM 執行。 \n \n 控制器程式存放於 Webots 專案內的 \xa0 controllers \xa0 目錄。 \n 什麼是 Supervisor Controller（監督控制器）？ \n 若機器人的 \xa0 supervisor 欄位設為 TRUE ，則其控制器為 \xa0 監督控制器 ，擁有額外權限，如： \n \n 控制模擬運行（移動機器人、錄製模擬畫面等）。 \n 可用於高層級操作，而非單純模擬真實機器人行為。 \n \n 監督控制器支援與一般控制器相同的編程語言。 \n 第二項  請整理\xa0 https://cyberbotics.com/doc/guide/introduction-to-webots \xa0中重要的英文單字與用法, 並且針對其中所使用的英文文法逐句說明. \n Important Vocabulary and Phrases (重要詞彙與短語) \n \n Simulation  - 模擬：一個模仿現實世界過程或系統的過程。 \n Prototyping  - 原型製作：創建產品或系統的早期版本（原型）的過程。 \n Mobile Robot  - 移動機器人：能夠在其環境中移動的機器人，通常配有感測器和驅動器。 \n Locomotion Schemes  - 移動方式：機器人移動的方式或系統（例如，輪式機器人、步態機器人、飛行機器人等）。 \n Sensors  - 感測器：用來檢測並對物理刺激作出反應的裝置，例如相機或距離感測器。 \n Actuators  - 驅動器：執行動作的裝置，如馬達或車輪。 \n Controller Program  - 控制程式：控制機器人行為或運作的程式。 \n Interface  - 介面：系統之間的連接或溝通（在此指模擬機器人與實體機器人之間的介面）。 \n Multi-Agent Research  - 多代理研究：涉及多個機器人共同工作的研究，通常是協作或集群設定。 \n Adaptive Behavior  - 自適應行為：基於環境或經驗變化的行為（通常涉及如神經網絡等人工智慧方法）。 \n BotStudio  - BotStudio：一種簡單的圖形化程式設計語言，用於在Webots中編程機器人。 \n VRML97 (Virtual Reality Modeling Language)  - VRML97（虛擬現實建模語言）：描述3D物體和環境的標準。 \n PROTOTYPE Files  - PROTOTYPE檔案：定義模擬中新增物件的檔案。 \n World File  - 世界檔案：定義模擬中環境、物體和機器人的檔案。 \n Controller Directory  - 控制器目錄：儲存機器人控制程式源碼和二進位檔案的目錄。 \n Supervisor Controller  - 監督控制器：一種特殊的控制器，具有更高的許可權來管理模擬功能。 \n Binary Executables  - 二進位執行檔：已編譯並可在系統中運行的程式檔案（例如".exe"檔案）。 \n Interpretation vs. Compilation  - 解釋與編譯：指編程語言的處理方式（例如，編譯語言如C/C++與解釋語言如Python的區別）。\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \n \n 第四項 \n 請列出上述文章中的重要的英文單字與解釋, 以及出現在文句中的用法 \n \n Grammar Explanation (文法說明) \n Sentence 1: \n "Webots is a professional mobile robot simulation software package." \n \n \n "Webots"  (主語)  is  (連繫動詞)  a professional mobile robot simulation software package  (謂語名詞短語)。這是一個簡單的陳述句，描述Webots是什麼。 \n \n \n Sentence 2: \n "It offers a rapid prototyping environment, that allows the user to create 3D virtual worlds with physics properties such as mass, joints, friction coefficients, etc." \n \n \n "It offers"  (主語 + 動詞) 介紹了Webots的功能。 \n "that allows"  是一個關係子句，修飾 "environment"，解釋環境的功能。 \n "the user to create" （不定式短語）說明用戶可以進行的操作。 \n "with physics properties such as mass, joints, friction coefficients, etc."  提供有關虛擬世界的物理屬性的詳細信息。 \n \n \n Sentence 3: \n "The user can add simple passive objects or active objects called mobile robots." \n \n \n "The user can add" （主語 + 情態動詞 + 動詞原形）表示用戶可以進行的操作或許可。 \n "called mobile robots"  是一個現在分詞短語，修飾 "active objects"，提供額外信息。 \n \n \n Sentence 4: \n "These robots can have different locomotion schemes (wheeled robots, legged robots, or flying robots)." \n \n \n "can"  表示能力或可能性。 \n "different locomotion schemes"  表示機器人可以採用的不同移動方式。 \n \n \n Sentence 5: \n "Moreover, they may be equipped with a number of sensor and actuator devices, such as distance sensors, drive wheels, cameras, motors, touch sensors, emitters, receivers, etc." \n \n \n "may be equipped"  使用情態動詞  may  表示可能性。 \n "such as"  用來介紹感測器和驅動器裝置的例子。 \n \n \n Sentence 6: \n "Finally, the user can program each robot individually to exhibit the desired behavior." \n \n \n "The user can program"  顯示了用戶的能力或許可。 \n "to exhibit"  是不定式動詞，說明編程的目的是為了表現所需的行為。 \n \n \n Sentence 7: \n "Webots also contains a number of interfaces to real mobile robots, so that once your simulated robot behaves as expected, you can transfer its control program to a real robot like e-puck, DARwIn-OP, Nao, etc." \n \n \n "so that"  引導目的子句，解釋為何要轉移控制程式。 \n "once your simulated robot behaves"  是時間條件子句，表示模擬機器人表現正常後，才會進行轉移。 \n \n \n Sentence 8: \n "What can I do with Webots?" \n \n \n 這是一個簡單的疑問句，使用情態動詞  "can"  問Webots的功能。 \n \n \n Sentence 9: \n "Webots is well suited for research and educational projects related to mobile robotics." \n \n \n "is well suited for"  表示Webots適合於某些用途。 \n "related to mobile robotics"  描述了Webots所支持的研究領域。 \n \n \n Sentence 10: \n "Many mobile robotics projects have relied on Webots for years in the following areas:" \n \n \n "have relied"  使用現在完成時，表示一個持續或反覆發生的動作。 \n 這句話列出了Webots被使用的領域。 \n \n \n Sentence 11: \n "What do I need to know to use Webots?" \n \n \n 這是另一個疑問句，使用  "do I need to know"  來詢問需要掌握的知識。 \n \n \n Sentence 12: \n "You will need a minimal amount of technical knowledge to develop your own simulations." \n \n \n "You will need" （將來時）表示必須具備的條件或需求。 \n "a minimal amount of technical knowledge"  指出所需的知識。 \n \n \n Sentence 13: \n "If you don\'t want to use existing robot models provided within Webots and would like to create your own robot models, or add special objects in the simulated environments, you will need a basic knowledge of 3D computer graphics and VRML97 description language." \n \n \n "If you don\'t want" （條件句）提出一種情境，表示若不使用現有的模型。 \n "would like to create"  表示替代的期望或行動。 \n "you will need" （將來時）強調執行某些操作所需的知識。 \n \n \n Sentence 14: \n "How do I get User Support?" \n \n \n 這是簡單的疑問句，詢問如何獲得使用者支持。 \n \n \n \n Overall Grammar Features (整體文法特點) \n \n \n Present Simple Tense (現在簡單時) : 用來描述事實或一般性資訊（例如："Webots is..."）。 \n Modal Verbs (情態動詞)（can, may, would） : 表示可能性、能力或請求（例如："You can program..."）。 \n Relative Clauses (關係子句) : 提供名詞的額外資訊（例如："robots called mobile robots"）。 \n Future Tense (將來時) : 描述將來會發生的動作（例如："You will need..."）。 \n Conditional Clauses (條件句) : 描述假設的情況及其結果（例如："If you don\'t want..."） \n \n', 'tags': '', 'url': 'Webots Tutorial 1 ~3 (HW3).html'}, {'title': '第六項', 'text': '在 Webots 中利用 圖形介面 (menu) 建立 四連桿機構 (four-bar linkage) 場景的步驟如下： \n 1. 建立新的 Webots 世界 開啟 Webots，點選 File > New World，建立一個新的場景。 儲存 新的世界 (.wbt 檔案)。 2. 添加環境 在 Scene Tree (場景樹) 視窗中，右鍵 WorldInfo，選擇 Add > Solid 來建立地面或其他環境元件。 若需要平面地板，選擇 Add > Shape > Plane，並設定合適的尺寸。 3. 建立四連桿機構 (1) 新增連桿 (Links) 每個連桿都是 Solid 元件，可從 Add > Solid > Shape > Box/Cylinder 新增。 設定： 尺寸 (Size) 質量 (Mass) 位置 (Translation) (2) 新增鉸鏈關節 (Revolute Joint) 在 Scene Tree 視窗，為每個關節選擇 Add > Joint > RevoluteJoint。 關鍵設定 Anchor (樞軸點位置)： 設定連桿之間的旋轉中心。 Joint Parameters： 可設定旋轉角度範圍 (minPosition, maxPosition) 或馬達 (motor)。 EndPoint： 設定此關節連接的目標連桿。 (3) 組合完整機構 確保所有連桿與關節的層級結構正確，例如： markdown 複製 編輯 - Base (固定底座)  - RevoluteJoint1  - Link1  - RevoluteJoint2  - Link2  - RevoluteJoint3  - Link3  - RevoluteJoint4  - Link4 4. 設定模擬參數 Gravity (重力)：確認四連桿能正常運動，可在 WorldInfo > gravity 中調整。 Physics (物理屬性)： 每個連桿應啟用 Physics 屬性，以確保物理模擬生效。 調整 density (密度) 或 mass (質量) 來優化運動表現。 5. 測試與調整 運行模擬 (Run 按鈕) 確保機構正常運作。 如有異常： 確認 關節 (RevoluteJoint) 的 anchor 位置是否正確。 檢查碰撞 是否影響運動。 若有馬達，確認 PID 參數 是否適當。 6. 進階功能 (可選) 控制馬達：在 RevoluteJoint > motor 啟用馬達，並設置 velocity (角速度) 及 torque (扭矩)。 加入腳本控制：透過 Robot 控制器 (Controller) 以 Python / C / C++ 控制四連桿運動。 動畫與視覺效果：可調整光源、材質與視角，使場景更具可視化效果。 注意事項 正確設置 RevoluteJoint 的 anchor，確保關節轉動中心對齊。 連桿長度與關節位置對應，避免不符合機構運動規則的設計。 調整物理屬性 (mass, inertia) 以確保運動穩定。 避免連桿互相碰撞，可在 boundingObject 設定適當形狀，或啟用 contactMaterial 屬性調整摩擦力。 測試不同參數 (如摩擦、重力) 以觀察影響。 \n', 'tags': '', 'url': '第六項.html'}, {'title': 'Final', 'text': '期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%) \n 題目:  Webots 動態投籃模擬系統的協同設計 \n 說明:  \n 籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上. \n 操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止. \n 請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中. \n 影片標題:  國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題 \n 期末報告pdf: \n ag2-期末報告 \n 期末報告影片: \n \n 期末報告心得: \n 41223113: \n 這次期末協同專案是以 Webots 動態投籃模擬系統為題，六人小組合作完成。專案中，我們設計了一個能隨機移動擺動的籃框，搭配可自由移動的投籃輪車，並透過鍵盤控制輪車移動與投籃。系統會自動計分並補球，讓遊戲能持續進行直到籃球用完。這過程讓我體會到團隊合作的重要性，大家分工協調才能完成複雜的系統整合，也學習到如何運用模擬工具來驗證設計，提升實務操作能力。整體來說，這次專案不僅加深了我對機械設計與控制的理解，也讓我更熟悉協同合作的流程。 \n 41223114: \n 修改車輛的速度絕非那麼簡單，除了contoller之外，device的部分也要做出修改，甚至要注意不同車輛間名子相同與否，繁瑣的步驟也造就了其可創造的機構的複雜性，甚至是一整個系統。能夠使用這學期所學的知識來創造一個完整的遊戲系統，我與有榮焉。未來希望我們可以製作出串流的過程，一整個系統在串流，想想就令人興奮。 \n \n 41123116 \n 這次期末專案我參與了的投籃機的模擬系統，過程中看不懂的英文我用，google的相機即時翻譯，錯誤的就詢問 cht gpt在反覆的改正，AI真的非常方便在這次的合作過程中常常使用，整個系統整合完後，相信我們已經具備一定的基礎，在以後也能使用到這項技能 \n \n', 'tags': '', 'url': 'Final.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};